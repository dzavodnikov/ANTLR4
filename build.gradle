apply plugin: 'java'

tasks.withType(JavaCompile) {
    // See: 
    //      https://stackoverflow.com/questions/21028438/
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // See: 
    //      https://mrhaki.blogspot.ru/2012/06/gradle-goodness-set-java-compiler.html
    options.encoding = 'UTF-8'
}

test {
     maxHeapSize = '512m' // To be compatible with Travis-CI infrastructure.
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        name    'JitPack'
        url     'https://jitpack.io/' 
    }
}

dependencies {
    compile     'org.antlr:antlr4-runtime:4.+'
    testCompile 'junit:junit:4.+'
}

apply plugin: 'antlr' // Using standard plugin. Alternative plugins:
// https://github.com/Abnaxos/gradle-antlr4-plugin/
// https://github.com/melix/antlr4-gradle-plugin/

def antlrGrammarsDir = 'src/main/antlr/'
def antlrGenSrcDir   = 'src/generated/java'
def antlrGrammarsFragments = [ 'org/zavodnikov/antlr4/fragments' ]

generateGrammarSource {
    // See: https://github.com/antlr/antlr4/blob/master/doc/tool-options.md
    arguments += [ '-visitor', '-long-messages' ]
    antlrGrammarsFragments.each {
        arguments << '-lib' << antlrGrammarsDir + it // To make grammar import available.
    }

    // We are no need to generate code for grammar fragments.
    source = source.matching {
        antlrGrammarsFragments.each {
            exclude it + '/**'
        }
    }

    outputDirectory = file(antlrGenSrcDir)
}

sourceSets.main.java {
    srcDir antlrGenSrcDir // Make sources generated by ANTLR available for using in another code.
}

clean {
    delete antlrGenSrcDir // Remove sources generated by ANTLR.
}

dependencies {
    antlr 'org.antlr:antlr4:4.+' // ANTLR runtime.
}

apply plugin: 'eclipse'

// See: 
//      https://stackoverflow.com/questions/10156847/
eclipse.classpath {
    downloadSources = true
    downloadJavadoc = true
}
